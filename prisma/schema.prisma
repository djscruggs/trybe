// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  role             Role              @default(USER)
  password         String?
  lastLogin        DateTime?
  createdAt        DateTime          @default(now())
  updatetAt        DateTime          @updatedAt
  posts            Post[]
  challenges       Challenge[] //challenges that the user as created
  memberChallenges MemberChallenge[] //challenges that the user is a member of
  profile          Profile?
  comments         Comment[]
  likes            Like[]
  clerkId          String?
  Note             Note[]
  checkIns         CheckIn[]

  @@index([clerkId])
}

model Profile {
  id           Int     @id @default(autoincrement())
  firstName    String
  lastName     String
  profileImage String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int     @unique
}

model Note {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  publishAt   DateTime   @default(now())
  body        String?    @db.Text
  published   Boolean    @default(false)
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  replyToId   Int?
  replyTo     Note?      @relation("ReplyTo", fields: [replyToId], references: [id])
  replies     Note[]     @relation("ReplyTo")
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId Int?
  isShare    Boolean    @default(false)
  likes       Like[]
  image       String?
  comment     Comment?   @relation(fields: [commentId], references: [id])
  commentId   Int?

  // indexes for faster sorting by user
  @@index([userId])
  @@index([userId, createdAt])
}

model Post {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  publishAt  DateTime   @default(now())
  title      String
  body       String?
  image      String?    @db.Text
  video      String?    @db.Text
  embed      String?    @db.Text
  published  Boolean    @default(false)
  user       User       @relation(fields: [userId], references: [id])
  userId     Int
  categories Category[]
  comments   Comment[]
  likes      Like[]
  challengeId Int?
  challenge Challenge? @relation(fields: [challengeId], references: [id])

  // indexes for faster sorting by user
  @@index([userId])
  @@index([userId, createdAt])
}

model Challenge {
  id           Int               @id @default(autoincrement())
  name         String
  description  String?           @db.Text
  mission      String?           @db.Text
  startAt      DateTime          @default(now())
  endAt        DateTime?
  frequency    Frequency         @default(DAILY)
  coverPhoto   String?
  icon         String?
  color        String?
  reminders    Boolean           @default(false)
  syncCalendar Boolean           @default(false)
  public       Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  publishAt    DateTime          @default(now())
  published    Boolean           @default(false)
  user         User              @relation(fields: [userId], references: [id])
  userId       Int
  members      MemberChallenge[]
  comments     Comment[]
  likes        Like[]
  notes        Note[]
  checkIns     CheckIn[]
  posts        Post[]

  // indexes for faster sorting by user
  @@index([userId])
  @@index([userId, updatedAt])
}

model MemberChallenge {
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId Int
  createdAt   DateTime   @default(now())

  @@id([challengeId, userId])
  @@index([userId])
  @@index([userId, createdAt])
}

model CheckIn {
  id          Int        @id @default(autoincrement())
  data        String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId Int
  @@index([userId, challengeId])
  @@index([userId])
}

model Comment {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  body        String
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  post        Post?      @relation(fields: [postId], references: [id])
  postId      Int?
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId Int?
  likes       Like[]
  notes       Note[]

  // indexes for faster sorting by user
  @@index([userId])
  @@index([challengeId])
  @@index([userId, createdAt])
}

model Like {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  user        User       @relation(fields: [userId], references: [id])
  userId      Int
  post        Post?      @relation(fields: [postId], references: [id])
  postId      Int?
  note        Note?      @relation(fields: [noteId], references: [id])
  noteId      Int?
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  challengeId Int?
  comment     Comment?   @relation(fields: [commentId], references: [id])
  commentId   Int?

  // indexes for faster sorting by user
  @@index([userId])
  @@index([challengeId])
  @@index([noteId])
  @@index([commentId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[]
}

enum Role {
  USER
  ADMIN
}

enum Frequency {
  DAILY
  WEEKDAYS
  ALTERNATING
  WEEKLY
  CUSTOM
}
