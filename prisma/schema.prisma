
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  role             Role              @default(USER)
  createdAt        DateTime          @default(now())
  password         String?
  updatetAt        DateTime          @updatedAt
  clerkId          String?
  lastLogin        DateTime?
  challenges       Challenge[]
  checkIns         CheckIn[]
  comments         Comment[]
  threads          Thread[]
  likes            Like[]
  memberChallenges MemberChallenge[]
  Note             Note[]
  posts            Post[]
  profile          Profile?

  @@index([clerkId])
}

model Profile {
  id           Int     @id @default(autoincrement())
  userId       Int     @unique
  firstName    String
  lastName     String
  profileImage String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Note {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  publishAt   DateTime   @default(now())
  body        String?
  published   Boolean    @default(false)
  userId      Int
  replyToId   Int?
  challengeId Int?
  commentId   Int?
  image       String?
  isShare     Boolean    @default(false)
  video       String?
  postId      Int?
  likeCount   Int        @default(0)
  replyCount  Int        @default(0)
  isThread    Boolean    @default(false)
  imageMeta   Json?
  videoMeta   Json?
  likes       Like[]
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  comment     Comment?   @relation(fields: [commentId], references: [id])
  post        Post?      @relation(fields: [postId], references: [id])
  replyTo     Note?      @relation("ReplyTo", fields: [replyToId], references: [id])
  replies     Note[]     @relation("ReplyTo")
  user        User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([userId, createdAt])
}
model Thread {
  id          Int        @id @default(autoincrement())
  title       String
  body        String?
  userId      Int
  challengeId Int?
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
  image       String?
  imageMeta   Json?
  videoMeta   Json?
  video       String?
  likeCount   Int        @default(0)
  likes       Like[]
  commentCount  Int        @default(0)
  comments     Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  

  @@index([userId])
  @@index([challengeId])
  @@index([userId, createdAt])
}

model Post {
  id                 Int        @id @default(autoincrement())
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  title              String
  published          Boolean    @default(false)
  body               String?
  publishAt          DateTime?
  userId             Int
  challengeId        Int?
  embed              String?
  image              String?
  video              String?
  public             Boolean    @default(false)
  commentCount       Int        @default(0)
  likeCount          Int        @default(0)
  notifyMembers      Boolean?   @default(false)
  notificationSentOn DateTime?
  imageMeta          Json?
  videoMeta          Json?
  comments           Comment[]
  likes              Like[]
  notes              Note[]
  challenge          Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user               User       @relation(fields: [userId], references: [id], onDelete: SetNull)
  categories         Category[] @relation("CategoryToPost")

  @@index([userId])
  @@index([userId, createdAt])
}

model Challenge {
  id             Int               @id @default(autoincrement())
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  publishAt      DateTime          @default(now())
  name           String
  published      Boolean           @default(false)
  userId         Int
  color          String?
  coverPhoto     String?
  description    String?
  endAt          DateTime?
  icon           String?
  reminders      Boolean           @default(false)
  startAt        DateTime          @default(now())
  syncCalendar   Boolean           @default(false)
  frequency      Frequency         @default(DAILY)
  mission        String?
  public         Boolean           @default(false)
  video          String?
  commentCount   Int               @default(0)
  likeCount      Int               @default(0)
  coverPhotoMeta Json?
  videoMeta      Json?
  user           User              @relation(fields: [userId], references: [id])
  checkIns       CheckIn[]
  comments       Comment[]
  likes          Like[]
  members        MemberChallenge[]
  notes          Note[]
  posts          Post[]
  threads       Thread[]

  @@index([userId])
  @@index([userId, updatedAt])
}

model MemberChallenge {
  userId      Int
  challengeId Int
  createdAt   DateTime  @default(now())
  nextCheckIn DateTime?
  lastCheckIn DateTime?
  id          Int       @id @default(autoincrement())
  checkIns    CheckIn[]
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id])

  @@index([challengeId])
  @@index([userId])
  @@index([userId, createdAt])
}

model CheckIn {
  id                Int             @id @default(autoincrement())
  data              String?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  userId            Int
  challengeId       Int
  memberChallengeId Int
  challenge         Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  memberChallenge   MemberChallenge @relation(fields: [memberChallengeId], references: [id])
  user              User            @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId, challengeId])
  @@index([userId])
}

model Comment {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  body        String
  imageMeta   Json?
  videoMeta   Json?
  userId      Int
  postId      Int?
  challengeId Int?
  threadId    Int?
  replyToId   Int?
  threadDepth Int        @default(0)
  likeCount   Int        @default(0)
  replyCount  Int        @default(0)
  
  challenge   Challenge? @relation(fields: [challengeId], references: [id])
  thread     Thread?   @relation(fields: [threadId], references: [id])
  post        Post?      @relation(fields: [postId], references: [id])
  replyTo     Comment?   @relation("ReplyTo", fields: [replyToId], references: [id])
  replies     Comment[]  @relation("ReplyTo")
  user        User       @relation(fields: [userId], references: [id])
  likes       Like[]
  notes       Note[]

  @@index([userId])
  @@index([challengeId])
  @@index([userId, createdAt])
}

model Like {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  userId      Int
  postId      Int?
  threadId      Int?
  challengeId Int?
  commentId   Int?
  noteId      Int?
  challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  comment     Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)
  thread     Thread?   @relation(fields: [threadId], references: [id], onDelete: Cascade)
  note        Note?      @relation(fields: [noteId], references: [id], onDelete: Cascade)
  post        Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user        User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([challengeId])
  @@index([noteId])
  @@index([commentId])
  @@index([threadId])
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String
  posts Post[] @relation("CategoryToPost")
}

enum Role {
  USER
  ADMIN
}

enum Frequency {
  DAILY
  WEEKDAYS
  ALTERNATING
  WEEKLY
  CUSTOM
}
